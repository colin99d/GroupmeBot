name: Tests
on: [pull_request, push]
jobs:
  linting:
    name: General Linting
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-linting
          restore-keys: ${{ runner.os }}-linting

      - run: pip install bandit black codespell flake8 mypy pyupgrade safety pylint==2.14.4
      - run: pip install types-pytz types-python-dateutil types-redis types-requests types-ujson
      - run: bandit -x ./tests -r . || true
      - run: black --check .
      - run: codespell --ignore-words-list=zlot,ba,buil,coo,ether,hist,hsi,mape,navagation,operatio,pres,ser,yeld,shold,ist,varian --quiet-level=2 --skip=./tests,.git,*.css,*.csv,*.html,*.ini,*.ipynb,*.js,*.json,*.lock,*.scss,*.txt,*.yaml,*/patches/*
      - run: flake8 . --count --ignore=E203,W503 --max-line-length=122 --show-source --statistics
      - run: mypy --ignore-missing-imports --exclude="/setup\.py$","/alembic/" .
      - run: shopt -s globstar && pyupgrade --py36-plus **/*.py
      - run: safety check
      - run: pylint bot main.py
  test:
    name: Base Tests - Ubuntu-latest - Python 3.10
    needs: linting
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: start database
        run : sudo /etc/init.d/mysql start

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.11
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install Package
        run: poetry install --no-interaction

      - name: Run tests
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest --cov=. tests/
